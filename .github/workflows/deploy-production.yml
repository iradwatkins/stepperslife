name: Deploy to Production Server

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 72.60.28.175
          username: root
          password: Bobby321&Gloria321Watkins?
          script: |
            set -e
            echo "üöÄ Starting deployment..."
            
            # Stop and remove old container
            docker stop stepperslife-prod 2>/dev/null || true
            docker rm stepperslife-prod 2>/dev/null || true
            
            # Clear port 3000
            docker stop $(docker ps -q --filter "publish=3000") 2>/dev/null || true
            docker rm $(docker ps -aq --filter "publish=3000") 2>/dev/null || true
            
            # Clone latest code
            cd /opt && rm -rf stepperslife
            git clone https://github.com/iradwatkins/stepperslife.git
            cd stepperslife
            
            # Configure build
            cat > next.config.js << 'EOF'
            const nextConfig = {
              eslint: { ignoreDuringBuilds: true },
              typescript: { ignoreBuildErrors: true },
              output: 'standalone',
              images: { remotePatterns: [{ protocol: "https", hostname: "**" }] }
            }
            module.exports = nextConfig
            EOF
            
            # Create production env file
            cat > .env.production << 'EOF'
            NODE_ENV=production
            PLATFORM_FEE_PER_TICKET=1.50
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_Y2xlcmsuc3RlcHBlcnNsaWZlLmNvbSQ
            CLERK_SECRET_KEY=sk_live_Zw4hG4urkym6QmEGc5DpZ2EijZebajzmWhfuYx4itq
            CLERK_FRONTEND_API_URL=https://clerk.stepperslife.com
            CLERK_BACKEND_API_URL=https://api.clerk.com
            CLERK_JWKS_URL=https://clerk.stepperslife.com/.well-known/jwks.json
            NEXT_PUBLIC_CONVEX_URL=https://youthful-porcupine-760.convex.cloud
            CONVEX_DEPLOYMENT=prod:youthful-porcupine-760
            NEXT_PUBLIC_APP_URL=https://stepperslife.com
            NEXT_PUBLIC_APP_NAME=SteppersLife
            NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=AIzaSyAD1jQHxD0Y7TfZzv8D8V7o7DfwB7CjJxE
            DATABASE_URL=file:./dev.db
            DISABLE_SQUARE=true
            EOF
            
            # Build Docker image with proper build args
            echo "üèóÔ∏è Building Docker image..."
            docker build --no-cache \
              --build-arg CACHE_BUST=$(date +%s) \
              -t stepperslife:prod .
            
            # Run container with environment file
            echo "üöÄ Starting new container..."
            docker run -d \
              --name stepperslife-prod \
              --restart unless-stopped \
              --network dokploy-network \
              -p 3000:3000 \
              --env-file .env.production \
              --label "traefik.enable=true" \
              --label "traefik.http.routers.stepperslife.rule=Host(\`stepperslife.com\`) || Host(\`www.stepperslife.com\`)" \
              --label "traefik.http.services.stepperslife.loadbalancer.server.port=3000" \
              stepperslife:prod
            
            # Verify deployment
            echo "‚úÖ Verifying deployment..."
            sleep 10
            
            # Check container is running
            if docker ps | grep -q stepperslife-prod; then
              echo "‚úÖ Container is running"
            else
              echo "‚ùå Container failed to start"
              docker logs stepperslife-prod --tail 50
              exit 1
            fi
            
            # Test health endpoint
            if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
              echo "‚úÖ API is responding"
            else
              echo "‚ùå API not responding"
              exit 1
            fi
            
            echo "üéâ Deployment successful!"
      
      - name: Verify Production
        run: |
          sleep 10
          echo "Testing production endpoints..."
          
          # Test HTTPS
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://stepperslife.com)
          echo "HTTPS Status: $HTTP_STATUS"
          
          # Test health
          curl -s https://stepperslife.com/api/health | jq '.' || echo "Failed to get health status"